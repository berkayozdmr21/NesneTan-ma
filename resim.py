# -*- coding: utf-8 -*-
"""resim.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Fx-RNe5UALt1VSRoNRDcrmY5n2amXZIw

Drive ile bağlantıyı kuruyoruz
"""

#Drive ile bağlantıyı kuruyoruz
from google.colab import drive

drive.mount('/content/drive')

#Drivedaki veri setleri yada görsellere ulaşıyoruz ünlem ls ile
!ls /content/drive/MyDrive/resim

"""!pip install ultralytics komutu, Python ortamına Ultralytics adlı kütüphaneyi yüklemek için kullanılır; bu kütüphane YOLOv5 ve YOLOv8 gibi gelişmiş nesne tanıma (object detection) modellerini içerir. Başındaki ! işareti, bu komutun Jupyter Notebook veya Google Colab gibi ortamlarda terminal komutu olarak çalıştırıldığını gösterir."""

#!pip install ultralytics komutu, Python ortamına Ultralytics adlı kütüphaneyi yüklemek için kullanılır;
# bu kütüphane YOLOv5 ve YOLOv8 gibi gelişmiş nesne tanıma (object detection) modellerini içerir.
#Başındaki ! işareti, bu komutun Jupyter Notebook veya Google Colab gibi ortamlarda terminal komutu olarak çalıştırıldığını gösterir.
!pip install ultralytics

#Bu kod, Google Colab ortamında Google Drive'a bağlanarak bir resim dosyasını alır,
#Ultralytics kütüphanesini kullanarak YOLOv8 nesne tanıma modelini çalıştırır ve resim üzerindeki nesneleri tespit edip görselleştirerek kullanıcıya gösterir.
from IPython import get_ipython
from IPython.display import display
# %%
from google.colab import drive
drive.mount('/content/drive')

# %%
!ls /content/drive/MyDrive/resim

# %%
!pip install ultralytics
# %%
from IPython import get_ipython
from IPython.display import display
# %%
from google.colab import drive
drive.mount('/content/drive')

# %%
!ls /content/drive/MyDrive/resim

# %%
# Import the YOLO class
from ultralytics import YOLO

# Load a pre-trained YOLO model
# Replace 'yolov8n.pt' with the path to your desired model weights if you have a custom one
model = YOLO('yolov8n.pt')

image_path = '/content/drive/MyDrive/resim/resim.png'
results = model(image_path)
# Access the first element of the results list (the Results object) and call show()
results[0].show()

"""Drive yüklediğimiz başka fotoğraflarlada deniyoruz aşağıda bir kaç örnek verilmiştir"""

#Drive yüklediğimiz başka fotoğraflarlada deniyoruz aşağıda bir kaç örnek verilmiştir
from IPython import get_ipython
from IPython.display import display
# %%
from google.colab import drive
drive.mount('/content/drive')

# %%
!ls /content/drive/MyDrive/resim

# %%
!pip install ultralytics
# %%
from IPython import get_ipython
from IPython.display import display
# %%
from google.colab import drive
drive.mount('/content/drive')

# %%
!ls /content/drive/MyDrive/resim

# %%
# Import the YOLO class
from ultralytics import YOLO

# Load a pre-trained YOLO model
# Replace 'yolov8n.pt' with the path to your desired model weights if you have a custom one
model = YOLO('yolov8n.pt')

image_path = '/content/drive/MyDrive/resim/resim2.png'
results = model(image_path)
# Access the first element of the results list (the Results object) and call show()
results[0].show()

from IPython import get_ipython
from IPython.display import display
# %%
from google.colab import drive
drive.mount('/content/drive')

# %%
!ls /content/drive/MyDrive/resim

# %%
!pip install ultralytics
# %%
from IPython import get_ipython
from IPython.display import display
# %%
from google.colab import drive
drive.mount('/content/drive')

# %%
!ls /content/drive/MyDrive/resim

# %%
# Import the YOLO class
from ultralytics import YOLO

# Load a pre-trained YOLO model
# Replace 'yolov8n.pt' with the path to your desired model weights if you have a custom one
model = YOLO('yolov8n.pt')

image_path = '/content/drive/MyDrive/resim/resim3.png'
results = model(image_path)
# Access the first element of the results list (the Results object) and call show()
results[0].show()

from IPython import get_ipython
from IPython.display import display
# %%
from google.colab import drive
drive.mount('/content/drive')

# %%
!ls /content/drive/MyDrive/resim

# %%
!pip install ultralytics
# %%
from IPython import get_ipython
from IPython.display import display
# %%
from google.colab import drive
drive.mount('/content/drive')

# %%
!ls /content/drive/MyDrive/resim

# %%
# Import the YOLO class
from ultralytics import YOLO

# Load a pre-trained YOLO model
# Replace 'yolov8n.pt' with the path to your desired model weights if you have a custom one
model = YOLO('yolov8n.pt')

image_path = '/content/drive/MyDrive/resim/resim4.png'

# Add this line to verify the file exists right before using it
!ls {image_path}

results = model(image_path)
# Access the first element of the results list (the Results object) and call show()
results[0].show()

from IPython import get_ipython
from IPython.display import display
# %%
from google.colab import drive
drive.mount('/content/drive')

# %%
!ls /content/drive/MyDrive/resim

# %%
!pip install ultralytics
# %%
from IPython import get_ipython
from IPython.display import display
# %%
from google.colab import drive
drive.mount('/content/drive')

# %%
!ls /content/drive/MyDrive/resim

# %%
# Import the YOLO class
from ultralytics import YOLO

# Load a pre-trained YOLO model
# Replace 'yolov8n.pt' with the path to your desired model weights if you have a custom one
model = YOLO('yolov8n.pt')

image_path = '/content/drive/MyDrive/resim/resim5.png'

# Add this line to verify the file exists right before using it
!ls {image_path}

results = model(image_path)
# Access the first element of the results list (the Results object) and call show()
results[0].show()

!pip install ultralytics
!pip install opencv-python

#Bu kod, Google Colab ortamında Google Drive’a bağlanarak belirtilen video dosyasını açar,
#YOLOv8 nesne tanıma modelini kullanarak videodaki her 2 karede bir nesne tespiti yapar ve tespit edilen nesneleri kareler üzerinde işaretleyip ekranda gösterir.
# Video kareleri okunur, model tahmin yapar, sonuçlar çizilir ve görselleştirilir. Kullanıcı q tuşuna basana kadar işlem devam eder.
from IPython import get_ipython
from IPython.display import display
import os
from google.colab import drive
import cv2
from ultralytics import YOLO
from google.colab.patches import cv2_imshow

# Google Drive'ı bağla
drive.mount('/content/drive')

# Video dosyasının yolu
video_path = '/content/drive/MyDrive/resim/video1.mp4'

# Dosya kontrolü
if not os.path.exists(video_path):
    print(f"❌ Dosya bulunamadı: {video_path}")
else:
    print(f"✅ Dosya bulundu: {video_path}")

    # YOLOv8 modelini yükle
    model = YOLO('yolov8n.pt')  # Alternatif: yolov8s.pt, yolov8m.pt vs.

    # Video dosyasını aç
    cap = cv2.VideoCapture(video_path)

    frame_count = 0
    while cap.isOpened():
        ret, frame = cap.read()
        if not ret:
            print("Video bitti veya kare okunamıyor.")
            break

        frame_count += 1
        print(f"Kare: {frame_count}")

        # YOLO ile tahmin
        results = model.predict(source=frame, save=False, verbose=False)

        # Sonuçları çiz (ilk sonuç nesnesi üzerinden)
        annotated_frame = results[0].plot()

        # Kareyi göster (Colab uyumlu)
        cv2_imshow(annotated_frame)

        # Bekleme süresi (çok kısa tutarsan video gibi akar)
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

    cap.release()
    cv2.destroyAllWindows()

"""Yine video ile başka bir örneğimiz genel olarak yüksek yüzdelerle doğru sonuç alıyoruz"""

from IPython import get_ipython
from IPython.display import display
import os
from google.colab import drive
import cv2
from ultralytics import YOLO
from google.colab.patches import cv2_imshow

# Google Drive'ı bağla
drive.mount('/content/drive')

# Video dosyasının yolu
video_path = '/content/drive/MyDrive/resim/video2.mp4'

# Dosya kontrolü
if not os.path.exists(video_path):
    print(f"❌ Dosya bulunamadı: {video_path}")
else:
    print(f"✅ Dosya bulundu: {video_path}")

    # YOLOv8 modelini yükle
    model = YOLO('yolov8n.pt')

    # Video dosyasını aç
    cap = cv2.VideoCapture(video_path)

    frame_count = 0
    process_every_n = 2  # Her 2 karede bir işle

    while cap.isOpened():
        ret, frame = cap.read()
        if not ret:
            print("Video bitti veya kare okunamıyor.")
            break

        frame_count += 1

        if frame_count % process_every_n == 0:
            print(f"Kare: {frame_count} (işleniyor)")

            # YOLO ile tahmin
            results = model.predict(source=frame, save=False, verbose=False)

            # Sonuçları çiz
            annotated_frame = results[0].plot()

            # Kareyi göster
            cv2_imshow(annotated_frame)

        # Çok kısa bir bekleme süresi (video gibi akar)
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

    cap.release()
    cv2.destroyAllWindows()

#Bu projede genellikle hazır veri setleri kullanılarak yapılan nesne tanıma işlemlerinin yerine, Google Drive’daki kendi çektiğim birden fazla fotoğraf ve video dosyası kullanıldı.
#Böylece hem fotoğraflar hem de videolar üzerinde YOLOv8 modeliyle nesne tespiti yapıldı ve tespit edilen nesneler görsel olarak gösterildi.
#Kendi verilerimi kullanarak gerçek ve kişisel içeriklerle çalışmayı tercih ettim, çünkü hazır veri setlerinden farklı olarak kendi çektiğim görüntüler daha anlamlı ve özel sonuçlar sağlıyor.

!pip install nbconvert

!apt-get install texlive texlive-xetex texlive-latex-extra pandoc

!apt-get install texlive-xetex texlive-fonts-recommended texlive-generic-recommended

!jupyter nbconvert --to pdf --output my_notebook.pdf '/content/drive/MyDrive/resim/resim.ipynb'

!jupyter nbconvert --to pdf <resim>.ipynb